import { useUser } from '@/contexts/UserContext';
import { useTelegram } from '@/contexts/TelegramContext';
import './ProfilePage.css';

export default function ProfilePage() {
  const { user } = useTelegram();
  const { userData, loading } = useUser();

  if (loading) {
    return (
      <div className="page-container">
        <div className="loader"></div>
      </div>
    );
  }

  const subscription = userData?.subscription;

  return (
    <div className="page-container profile-page">
      <h1>üë§ –ü—Ä–æ—Ñ–∏–ª—å</h1>

      <div className="profile-card card">
        <div className="profile-header">
          <div className="profile-avatar">
            {user?.first_name?.[0] || '?'}
          </div>
          <div className="profile-info">
            <h2>{user?.first_name} {user?.last_name}</h2>
            {user?.username && <p className="username">@{user.username}</p>}
            <p className="user-id">ID: {userData?.telegramId}</p>
          </div>
        </div>
      </div>

      <div className="subscription-card card">
        <h3>üíé –ü–æ–¥–ø–∏—Å–∫–∞</h3>
        {subscription ? (
          <div className="subscription-details">
            <div className="detail-row">
              <span className="detail-label">–ü–ª–∞–Ω:</span>
              <span className="detail-value">{subscription.plan}</span>
            </div>
            <div className="detail-row">
              <span className="detail-label">–°—Ç–∞—Ç—É—Å:</span>
              <span className={`badge ${subscription.status === 'ACTIVE' ? 'badge-success' : 'badge-danger'}`}>
                {subscription.status === 'ACTIVE' ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}
              </span>
            </div>
            {subscription.requestsLimit > 0 && (
              <div className="detail-row">
                <span className="detail-label">–ó–∞–ø—Ä–æ—Å–æ–≤:</span>
                <span className="detail-value">
                  {subscription.requestsUsed} / {subscription.requestsLimit}
                </span>
              </div>
            )}
            {subscription.endDate && (
              <div className="detail-row">
                <span className="detail-label">–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</span>
                <span className="detail-value">
                  {new Date(subscription.endDate).toLocaleDateString('ru-RU')}
                </span>
              </div>
            )}
          </div>
        ) : (
          <p className="text-muted">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏</p>
        )}
      </div>

      <div className="stats-card card">
        <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
        <div className="stats-list">
          <div className="stat-row">
            <span className="stat-icon">üìù</span>
            <span className="stat-name">–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤</span>
            <span className="stat-count">{userData?.stats?.totalRequests || 0}</span>
          </div>
          <div className="stat-row">
            <span className="stat-icon">üí∞</span>
            <span className="stat-name">–ü–æ—Ç—Ä–∞—á–µ–Ω–æ</span>
            <span className="stat-count">{userData?.stats?.totalSpent || 0} ‚ÇΩ</span>
          </div>
        </div>
      </div>

      <div className="referral-card card">
        <h3>üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</h3>
        <p className="text-muted mb-2">
          –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã
        </p>
        <div className="referral-link">
          <input 
            type="text" 
            className="input" 
            value={`https://t.me/bot?start=ref_${userData?.id}`}
            readOnly
          />
          <button className="btn btn-primary mt-2">
            –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
          </button>
        </div>
      </div>
    </div>
  );
}
